{
  "info": {
    "title": "CodeRoad Redux JS Tutorial",
    "description": "A [CodeRoad](https://coderoad.github.io) tutorial for learning Redux."
  },
  "pages": [
    {
      "title": "Project Setup",
      "description": "Welcome! In this tutorial series we'll be exploring Redux, a tool for predictably managing state in your app.\n\nWe will be making a \"Worst Pokemon\" voting app. For the app, we'll need to setup some build tools.\n\nRunning `> npm run setup` will do the following:\n\n1. Install package dev dependencies\n2. Create an output directory called \"dist\"\n3. Install \"concurrently\" & \"browser-sync\" globally\n4. Run our app in the browser\n\nYou'll find this \"setup\" script located in your *package.json*.\n\nWe'll be installing several NPM packages from terminal. You may consider installing a plugin for adding a terminal inside your editor, such as [\"platformio-ide-terminal\"](https://github.com/platformio/platformio-atom-ide-terminal).",
      "tasks": [
        {
          "description": "Open a terminal in this project directory and run `npm run setup`. Save to continue.",
          "tests": [
            "01/01"
          ],
          "hints": [
            "Open up Bash (terminal) in this project directory and run `npm run setup` to get setup",
            "If you're using Windows, you may want to use Git Bash",
            "If your setup fails, try running `sudo npm run setup`"
          ],
          "actions": [
            "writeFromFile('package.json', '01/package.json')"
          ]
        },
        {
          "description": "To run the app, simply run `npm start`. Save to continue.",
          "tests": [
            "01/02"
          ],
          "actions": [
            "writeFromFile('index.html', '01/index.html')"
          ]
        }
      ],
      "onPageComplete": "Use `npm start` to ensure your app is working throughout the following steps. First things first, we'll look at the core of Redux: the **store**."
    },
    {
      "title": "The Store",
      "description": "In Redux, the **store** is the boss. Think of the **store** as holding the \"single source of truth\" of your application data.\n\nOnce created, the **store** has several helpful methods:\n  - `getState` to read the current data of your app.\n  - `dispatch` to trigger actions. We'll look at actions more later.\n  - `subscribe` to listen for state changes\n\n> [Learn more](http://redux.js.org/docs/basics/Store.html).\n\nLet's get started by settings up the **store** for your Redux app. We will be working in \"src/index.js\".",
      "tasks": [
        {
          "description": "install Redux as a dependency.",
          "hints": [
            "Run `npm install --save redux`."
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "tests": [
            "02/01"
          ]
        },
        {
          "description": "import `createStore` from the redux module.",
          "hints": [
            "Add `import { createStore } from 'redux';`"
          ],
          "tests": [
            "02/02"
          ]
        },
        {
          "description": "use `createStore` to make your first store. Be sure to call it `store`. Use a simple \"reducer\" function for now, let's say `state => state`. See [docs](http://redux.js.org/docs/api/createStore.html).",
          "hints": [
            "declare your store, `const store`",
            "call store with a simple reducer, `const store = createStore(state => state)`"
          ],
          "tests": [
            "02/03"
          ]
        },
        {
          "description": "log your `store` to the console and have a look.",
          "tests": [
            "02/04"
          ],
          "hints": [
            "console.log(store)"
          ]
        },
        {
          "description": "log `store.getState()` to the console",
          "tests": [
            "02/05"
          ],
          "hints": [
            "console.log(store.getState())"
          ]
        },
        {
          "description": "import the newly written data in 'data.js'. Set it to a variable called \"initialState\". Note: due to a bug with `import`'s, use `require` for imports.",
          "tests": [
            "02/06"
          ],
          "actions": [
            "writeFromFile('src/data.js', '02/data.js')"
          ],
          "hints": [
            "Try this: `const initialState = require('./data.js').default;`"
          ]
        },
        {
          "description": "pass in `initialState` as a second param your `createStore`",
          "tests": [
            "02/07"
          ],
          "hints": [
            "Pass in `initialState` as a second param to `createStore`"
          ]
        }
      ],
      "onPageComplete": "As you can see, the store is just an object with various methods like \"dispatch\" and \"getState\". Let's see what these methods do in the next step."
    },
    {
      "title": "Actions",
      "description": "An **action** is a named event that can trigger a change in your application data.\n\nActions are often broken into three parts to make your code more readable.\n\n##### 1. Actions\n\nAn **action** includes a named \"type\".\n```js\nconst action = { type: 'ACTION_NAME' };\n```\n\nActions may also include other possible params needed to transform that data.\n\n```js\nconst getItem = { type: 'GET_ITEM', clientId: 42, payload: { id: 12 } };\n```\n\nNormal params passed in are often put inside of a `payload` object. This is part of a standard called [Flux Standard Action](https://github.com/acdlite/flux-standard-action). Other common fields include `error` & `meta`.\n\n##### 2. Action Creators\n\nAn **action creator** is a functions that creates an action.\n\n```js\nconst actionName = () => ({ type: 'ACTION_NAME' });\n```\n\nAction creators make it easy to pass params into an action.\n\n```js\nconst getItem = (clientId, id) => ({ type: 'GET_ITEM', clientId: 42, payload: { id: 12 } });\n```\n\n##### 3. Action Types\n\nOften, the action name is also extracted as an **action type**. This is helpful for readability and to catch action name typos. Additionally, most editors will auto-complete your action types from the variable name.\n\n```js\nconst ACTION_NAME = 'ACTION_NAME';\nconst GET_ITEM = 'GET_ITEM';\n\nconst action = () => ({ type: ACTION_NAME });\nconst getItem = (id) => ({ type: GET_ITEM, payload: { id }});\n```\n\n> [Learn more](http://redux.js.org/docs/basics/Actions.html).\n\nLet's write an action for voting up your choice of worst pokemon.",
      "tasks": [
        {
          "description": "create an action called `voteUp`. It should be an object with a type of 'VOTE_UP'",
          "tests": [
            "03/01"
          ],
          "actions": [
            "open('src/index.js')"
          ]
        },
        {
          "description": "change `voteUp` into an action creator.",
          "tests": [
            "03/02"
          ],
          "hints": [
            "wrap your output object in round brackets",
            "Try this: `const voteUp = () => ({ type: \"VOTE_UP\" });`"
          ]
        },
        {
          "description": "add a param of `id` to your action creator, and a payload of \"id\"",
          "tests": [
            "03/03"
          ]
        },
        {
          "description": "create an action type for `voteUp`",
          "hints": [
            "const VOTE_UP = \"VOTE_UP\""
          ],
          "tests": [
            "03/04"
          ]
        },
        {
          "description": "Use the action type inside your `voteUp` action creator. Notice how your editor may autocomplete the action type.",
          "tests": [
            "03/05"
          ],
          "hints": [
            "change \"VOTE_UP\" to use the constant VOTE_UP",
            "Try this: `const voteUp = () => ({ type: VOTE_UP });`"
          ]
        }
      ],
      "onPageComplete": "Excellent! In the next unit we will look at how these actions can be used to transform data using a \"reducer\""
    },
    {
      "title": "Reducer",
      "description": "A **reducer** is what handles the actual data transformation triggered by an action.\n\nIn it's simplest form, a **reducer** is just a function with the current **state** and current **action** passed in.\n\n```js\nconst reducer = (state, action) => {\n  console.log(state);\n  return state;\n};\n```\n\nWe can handle different actions by matching on the action type. If no matches are found, we just return the original state.\n\n```js\nconst ACTION_NAME = 'ACTION_NAME';\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    // match on action.type === ACTION_NAME\n    case ACTION_NAME:\n      state = 42;\n      // return new state after transformation\n      return state;\n    default:\n      return state;\n  }\n};\n```\n\nOur reducer is passed in as the first param when we create our **store**.\n\n> [Learn more](http://redux.js.org/docs/basics/Reducers.html).",
      "tasks": [
        {
          "description": "Extract the `state => state` function called by `createStore`, and declare it as a variable called \"reducer\".",
          "tests": [
            "04/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "Try this: `const reducer = state => state;`",
            "Rename this: `const store = createStore(reducer, initialState)`"
          ]
        },
        {
          "description": "Log the state inside of your reducer. What does it look like?",
          "tests": [
            "04/02"
          ],
          "hints": [
            "Add a `console.log` statement inside of your reducer function",
            "Try this:```js\nconst reducer = (state) => {\n  console.log(state);\n  return state;\n};\n```"
          ]
        },
        {
          "description": "The reducer takes two params. The first is \"state\", call the second one \"action\"",
          "tests": [
            "04/03"
          ],
          "hints": [
            "Try this: `const reducer = (state, action) => ...`"
          ]
        },
        {
          "description": "Dispatch two voteUp actions through the reducer: `store.dispatch(voteUp(2))`. Change your log statement inside of your reducer to look like this: `console.log('state: ', state, 'action: ', action)`",
          "tests": [
            "04/04"
          ]
        },
        {
          "description": "Create a `switch` statement in your `reducer` and pass in `action.type`, the default return should return `state`",
          "tests": [
            "04/05"
          ],
          "hints": [
            "In your reducer, try this: `switch(action.type) {}`",
            "Your switch statement should have a `default: return state`"
          ]
        },
        {
          "description": "The `switch` statement should have a `default` case that returns the state",
          "tests": [
            "04/06"
          ]
        },
        {
          "description": "add a switch case for `VOTE_UP`. For now, just console.log the `id` of the action passed in and return the default state again. Tip: destructuring: `const { id } = action.payload;`",
          "tests": [
            "04/07"
          ],
          "hints": [
            "Try this: `case VOTE_UP: console.log(action.payload.id);`"
          ]
        }
      ],
      "onPageComplete": "There are a few \"gotchas\" that come up with reducers. Reducers must be \"pure\" functions, let's find out how to accomplish this in the next step"
    },
    {
      "title": "Pure Functions",
      "description": "Redux totes itself as a \"predictable\" state container. This predictability is the product of some helpful restrictions that force us to write better code.\n\nOne such guideline: reducers must be pure functions.\n\n##### Mutation\n\nWhen an action passes through a reducer, it should not \"mutate\" the data, but rather return a new state altogether.\n\n```js\ncase ADD_TO_ARRAY:\n  /* bad */\n  state.push(42); // push mutates the state\n  return state;\n```\n\nIf multiple actions were pushing into the state, the functions are no longer **pure** and thus no longer fully predictable.\n\n##### Pure\n\nBy returning an entirely new array, we can be sure that our state will be **pure** and thus predictable.\n\n```js\ncase ADD_TO_ARRAY:\n  /* good */\n  return state.concat(42); // returns a new array, with 42 on the end\n```\n\nLet's give writing pure reducers a try as we implement our `VOTE_UP` action.",
      "tasks": [
        {
          "description": "Time to make the VOTE_UP action change the state. Return a new list of Pokemon after incrementing \"votes\" of the pokemon with the matching \"id\"",
          "tests": [
            "05/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "If the pokemon.id matches the payload.id, increase the votes by one",
            "Don't forget to return the new state",
            "Try returning `return { pokemon };`"
          ]
        },
        {
          "description": "Let's make a test to see that we are truly returning a new state. Call `Object.freeze()` on your `initialState`. `freeze` makes an object immutable - meaning the object can not be changed. And yet your reducer should still work, since it returns a new state each call.",
          "tests": [
            "05/02"
          ],
          "hints": [
            "Try this: `const initialState = Object.freeze({ ... })`"
          ]
        },
        {
          "description": "What if we were dealing with multiple keys on the state. We'd have to ensure that our changes return a complete new state each time. Use `Object.assign`",
          "tests": [
            "05/03"
          ],
          "hints": [
            "Try this: `case VOTE_UP: const pokemon = state.pokemon.map(...)`",
            "return `Object.assign({}, state, { pokemon: nextPokemon });`"
          ]
        }
      ],
      "onPageComplete": "Now that you have an idea of how reducers work. Next we can look at how to create multiple, modular reducers."
    },
    {
      "title": "Combine Reducers",
      "description": "In Redux, we are not limited to writing a long, single reducer. Using `combineReducers` allows us to create modular, composable reducers.\n\nAs our state is an object, for example:\n\n```js\n{\n  pokemon: [ ... ],\n  users: [ ... ]\n}\n```\n\nWe can create a reducer to handle data transformations for each key in our state.\n\n```js\n{\n  pokemon: pokemonReducer,\n  users: usersReducer\n}\n```\n\nAs our app grows, we can now think of the data in smaller chunks.\n\n> [Learn more](http://redux.js.org/docs/api/combineReducers.html).\n\nLet's try refactoring our app to use `combineReducers`.",
      "tasks": [
        {
          "description": "create a new `const reducers` and set it equal to \"reducer\". Pass \"reducers\" into your store for now, instead of \"reducer\". If this seems convoluted it is because we're trying not to break the app.",
          "tests": [
            "06/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "First, try this: `const reducers = reducer;`",
            "Second, try this: `const store = createStore(reducers, initialState);`"
          ]
        },
        {
          "description": "We're going to create more than one reducer. They can't all be called \"reducer\", so rename your original reducer \"pokemon\". Make sure to set `reducers` equal to the new name as well.",
          "tests": [
            "06/02"
          ],
          "hints": [
            "First, rename \"pokemon\" to \"reducer\"",
            "Like this: `const pokemon = (state, action) => {...}`",
            "Second, change your \"reducers\" to equal \"pokemon\"",
            "Like this: `const reducers = pokemon;`"
          ]
        },
        {
          "description": "When we use `combineReducers` we will be able to define the initial state inside of each reducer. To keep things working, we'll have to do this step by step. Copy the \"pokemon\" key from `initialState` and give it its own variable called \"defaultPokemon\". It should be an array with three pokemon.",
          "tests": [
            "06/03"
          ],
          "hints": [
            "Like this: `const defaultPokemon = [{ ... }, { ... }, { ... }]`"
          ]
        },
        {
          "description": "Set your pokemon reducer first param, state, to equal \"pokemon\", and give it a default value of `defaultPokemon` using ES6 default params.",
          "tests": [
            "06/04"
          ],
          "hints": [
            "Default params work like this: `fn(param1 = defaultParam, param2)`",
            "Like this: `const pokemon = (pokemon = defaultPokemon, action) => {`"
          ]
        },
        {
          "description": "Fix references to \"state\" inside your reducer to match the passed in value \"pokemon\"",
          "tests": [
            "06/05"
          ],
          "hints": [
            "Change three references to \"pokemon\" in your pokemon reducer",
            "First: 'const pokemon = (pokemon = defaultPokemon, action) => {`",
            "Second: `const nextPokemon = pokemon.map(...)`",
            "Third: `default: return pokemon;`"
          ]
        },
        {
          "description": "Our initial state is now handled by `defaultPokemon`. Set the initial state inside of your `createStore` to simply be an empty object (`{}`).",
          "tests": [
            "06/06"
          ],
          "hints": [
            "Try this: `const store = createStore(reducers, {});`"
          ]
        },
        {
          "description": "import `combineReducers` from redux",
          "tests": [
            "06/07"
          ],
          "hints": [
            "Try this: `import { combineReducers } from 'redux';`"
          ]
        },
        {
          "description": "`reducers` should now call `combineReducers` instead and call `pokemon`. `combineReducers` takes an object with keys of each reducer.",
          "tests": [
            "06/08"
          ],
          "hints": [
            "Try this: `const reducers = combineReducers({pokemon});`"
          ]
        }
      ],
      "onPageComplete": "The state remains the same, but now our reducers are much more modular. In the next step, we will separate our code into it's own file"
    },
    {
      "title": "File Structure",
      "description": "Our \"index.js\" file is getting a little long. Of course, our app will be more maintainable if we can divide it across different, well structured files.\n\nThere are different ways of structuring your app:\n\n##### 1. Files By Type\n\n- store.js\n- action-types.js\n- action-creators.js\n- reducers.js\n\n##### 2. Files By Function\n\n- store.js\n- reducers.js\n- modules\n  - pokemon\n    - index.js\n\n##### 3. Files by Function & Type\n\n- store\n- reducers.js\n- modules\n  - pokemon\n    - actions.js\n    - reducer.js\n    - action-types.js\n\nFor simplicity in this example, we'll try putting our files together by function.",
      "tasks": [
        {
          "description": "create a folder in your base directory called \"pokemon\" and add a file inside called \"index.js\"",
          "tests": [
            "07/01"
          ],
          "hints": [
            "create a file in \"src/pokemon/index.js\""
          ]
        },
        {
          "description": "copy the `VOTE_UP` action type from \"index.js\" and put it in \"src/pokemon/index.js\". Keep the original version for now, so our app won't break yet.",
          "tests": [
            "07/02"
          ],
          "hints": [
            "\"src/pokemon/index.js\" should have `const VOTE_UP = 'VOTE_UP';`"
          ]
        },
        {
          "description": "also copy the `voteUp` action creator from \"src/index.js\" and put it in \"src/pokemon/index.js\". Export it as a [\"named\" export](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/export).",
          "tests": [
            "07/03"
          ],
          "hints": [
            "move `voteUp` into \"src/pokemon/index.js\"",
            "\"src/pokemon/index.js\" should have `const voteUp = id => ({ type: VOTE_UP, payload: { id } });`",
            "make it a named export: `export const voteUp` = ..."
          ]
        },
        {
          "description": "import `voteUp` inside of \"src/index.js\". Also delete the unnecessary 'voteUp' in the same file from before.",
          "tests": [
            "07/04"
          ],
          "hints": [
            "Try this: `import { voteUp } from './pokemon';`"
          ]
        },
        {
          "description": "take the `defaultPokemon` from \"src/index.js\" and copy it into \"src/pokemon/index.js\"",
          "tests": [
            "07/05"
          ]
        },
        {
          "description": "take your `pokemon` reducer from \"src/index.js\" and put it in \"src/pokemon/index.js\". Export the reducer as a \"default\" export",
          "tests": [
            "07/06"
          ]
        },
        {
          "description": "in your \"src/index.js\" file, also import your pokemon reducer. This can be on the same line of code. Delete the unnecessary original \"pokemon\", \"defaultPokemon\" and \"VOTE_UP\" as well.",
          "tests": [
            "07/07"
          ],
          "hints": [
            "Try this: `import { default as pokemon, voteUp } from './pokemon';`"
          ]
        }
      ],
      "onPageComplete": "Page 7 complete..."
    },
    {
      "title": "Logger",
      "description": "We still haven't touched on one of the most powerful features of Redux: **middleware**.\n\nMiddleware is triggered on each action.\n\n```\n1. Dispatch(action)\n  -> 2. Middleware(state, action)\n    -> 3. Reducer(state, action)\n      -> 4. state\n```\n\nMiddleware is created with the `store`. In it's most basic form, middleware can look like the function below:\n\n```js\nconst store => next => action => {\n  // do something magical here\n  return next(action);\n  // returns result of reducer called with action\n}\n```\n\nLet's try out the power of middleware with \"redux-logger\".",
      "tasks": [
        {
          "description": "import `applyMiddleware` in \"index.js\" from the \"redux\" package. It is a named import.",
          "tests": [
            "08/01"
          ],
          "actions": [
            "open('src/index.js')"
          ]
        },
        {
          "description": "set the second param in createStore to `applyMiddleware()`",
          "tests": [
            "08/02"
          ],
          "hints": [
            "Try this: `createStore(reducers, applyMiddleware());`"
          ]
        },
        {
          "description": "install \"redux-logger\" using npm",
          "tests": [
            "08/03"
          ],
          "hints": [
            "Try this: `npm install --save-dev redux-logger`"
          ]
        },
        {
          "description": "import `createLogger` from the \"redux-logger\" package. It is a default import.",
          "tests": [
            "08/04"
          ],
          "hints": [
            "Try this: `import createLogger from 'redux-logger';`"
          ]
        },
        {
          "description": "create a \"logger\" as the result of `createLogger()`",
          "tests": [
            "08/05"
          ],
          "hints": [
            "Note that `logger` should be above `store`.",
            "Try this: `const logger = createLogger()`"
          ]
        },
        {
          "description": "pass \"logger\" into `applyMiddleware()`",
          "tests": [
            "08/06"
          ],
          "hints": [
            "Try this: `applyMiddleware(logger)`"
          ]
        }
      ],
      "onPageComplete": "Look in the console"
    },
    {
      "title": "Second Action",
      "description": "Notice how the votes remain out of order. Let's create a sorting action for putting the highest votes at the top.\n\nFor this, we'll use a sorting function. A sorting function takes two values, and returns either:\n\n- `1`:  move ahead\n- `-1`: move behind\n- `0`:  no change\n\nSee an example for sorting votes below:\n\n```js\nfunction sortByVotes(a, b) {\n  switch(true) {\n   case a.votes < b.votes: return 1;\n   case a.votes > b.votes: return -1;\n   default: return 0;\n  }\n }\n```\n\nLet's setup a `SORT_BY_POPULARITY` action to be called after each vote.",
      "tasks": [
        {
          "description": "in \"src/pokemon/index.js\", create an action type for 'SORT_BY_POPULARITY'",
          "tests": [
            "09/01"
          ],
          "actions": [
            "open('src/pokemon/index.js')"
          ],
          "hints": [
            "Try this: `const SORT_BY_POPULARITY = 'SORT_BY_POPULARITY';`"
          ]
        },
        {
          "description": "create the action creator called 'sortByPopularity' and export it",
          "tests": [
            "09/02"
          ],
          "hints": [
            "It should be a function that returns `{ type: SORT_BY_POPULARITY }`",
            "Try this: `const sortByPopularity = () => ({ ... })`",
            "It should be exported using `export`"
          ]
        },
        {
          "description": "import `sortByPopularity` in \"src/index.js\".",
          "tests": [
            "09/03"
          ],
          "hints": [
            "Try this: `import { sortByPopularity } from './pokemon';`"
          ]
        },
        {
          "description": "in \"src/index.js\", dispatch a `sortByPopularity` action at the bottom of the page",
          "tests": [
            "09/04"
          ],
          "hints": [
            "use `store.dispatch(actionCreator)`",
            "Try this: `store.dispatch(sortByPopularity())`"
          ]
        },
        {
          "description": "back in \"src/pokemon/index.js\", add a `SORT_BY_POPULARITY` case that returns `pokemon.sort();`",
          "tests": [
            "09/05"
          ],
          "hints": [
            "Try this: `case SORT_BY_POPULARITY: return pokemon.sort()`"
          ]
        },
        {
          "description": "use the `sortByVotes` function and pass it into the `pokemon.sort` function. Sorting function return 1, -1, or 0 depending on where the index of b should be arranged around a.",
          "tests": [
            "09/06"
          ],
          "hints": [
            "Try this: `case SORT_BY_POPULARITY: return pokemon.sort(sortByVotes)`"
          ],
          "actions": [
            "insert('\nfunction sortByVotes(a, b) {\n  switch(true) {\n    case a.votes < b.votes:\n      return 1;\n    case a.votes > b.votes:\n      return -1;\n    default: return 0;\n  }\n}\n\n')"
          ]
        },
        {
          "description": "Use the `sortByKey` function, which is more reusable. It should take a param of \"key\" and return a function similar to `sortByVotes`, but sorting on the \"key\" param.",
          "tests": [
            "09/07"
          ],
          "actions": [
            "insert('\nfunction sortByKey(key) {\n  return function(a, b) {\n\n    // sorting cases here\n\n  }\n}\n')"
          ]
        },
        {
          "description": "You've just created a **thunk** - a function that returns a function. Pass your function into the `pokemon.sort()` method and give it the key of 'votes'",
          "tests": [
            "09/08"
          ],
          "hints": [
            "Try this: `sortByKey('votes')`",
            "Try this: pokemon.sort(sortByKey('votes'))"
          ]
        }
      ],
      "onPageComplete": "In the next step, we'll look at using **thunks** to call helpful async actions from within middleware"
    },
    {
      "title": "Thunk",
      "description": "As we've seen in the previous steps, thunks sound more complicated than they really are. A thunk is just a function that returns a function.\n\nInside of middleware, we can determine if an action is returning a function.\n\n```js\nconst store => next => action => {\n  if (typeof action === 'function') {\n    // it's a thunk!\n  }\n  return next(action);\n}\n```\n\nIf it is a thunk, we can pass in two helpful params:\n  - `store.dispatch`\n  - `store.getState`\n\nAs we'll see, `dispatch` alone can allow us to create async or multiple actions.",
      "tasks": [
        {
          "description": "install \"redux-thunk\" as a dependency",
          "tests": [
            "10/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "Try this: `npm install --save redux-thunk`"
          ]
        },
        {
          "description": "import `reduxThunk` from \"redux-thunk\"",
          "tests": [
            "10/02"
          ],
          "hints": [
            "Try this: `import reduxThunk from 'redux-thunk';`"
          ]
        },
        {
          "description": "add `reduxThunk` to applyMiddleware. The logger should always go last",
          "tests": [
            "10/03"
          ],
          "hints": [
            "Try this: `applyMiddleware(reduxThunk, logger)`"
          ]
        },
        {
          "description": "change the `voteUp` action creator in \"src/pokemon/index.js\" to return a thunk with the param of \"dispatch\"",
          "tests": [
            "10/04"
          ],
          "hints": [
            "`Try this: `const voteUp => (id) => (dispatch) => {}`'"
          ]
        },
        {
          "description": "voteUp` should dispatch `VOTE_UP",
          "tests": [
            "10/05"
          ],
          "hints": [
            "Try this: `const voteUp => (id) => (dispatch) => dispatch(voteUp(id))`"
          ]
        },
        {
          "description": "`voteUp` should also dispatch `sortByPopularity after each vote",
          "tests": [
            "10/06"
          ],
          "hints": [
            "Try this: `const voteUp => (id) => (dispatch) => { ... dispatches ... }`",
            "Add: `dispatch(sortByPopularity());`",
            "Try this: `const voteUp => (id) => (dispatch) => { dispatch(voteUp(id); dispatch(sortByPopularity()))}`"
          ]
        }
      ],
      "onPageComplete": "Excellent! You've completed this tutorial! Look forward to more soon!"
    }
  ]
}