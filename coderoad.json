{
  "info": {
    "title": "CodeRoad Redux JS Tutorial",
    "description": "A [CodeRoad](https://coderoad.github.io) tutorial for learning Redux."
  },
  "pages": [
    {
      "title": "Project Setup",
      "description": "Getting a project setup is rarely easy. Luckily, we have a quick script that can do the work for us.\n\n---\n\nRunning `> npm run setup` will do the following:\n\n1. Install package dev dependencies\n2. Create an output directory called \"dist\"\n3. Install \"concurrently\" & \"browser-sync\" globally\n4. Run our app in the browser\n\nYou'll find this \"setup\" script located in your *package.json*.\n\n---\n\nWe'll be installing a lot of scripts from terminal. You may also want to consider installing the atom package [\"platformio-ide-terminal\"](https://github.com/platformio/platformio-atom-ide-terminal), which provides a terminal inside your editor.",
      "tasks": [
        {
          "description": "Open a terminal in this project directory and run `npm run setup`.",
          "tests": [
            "01/01"
          ],
          "hints": [
            "Open a terminal in this project directory and run `npm run setup` to get setup"
          ],
          "actions": [
            "open('package.json')",
            "set('{\n  \"name\": \"coderoad-redux-js\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Coderoad tutorial for using redux with raw javascript\",\n  \"bugs\": {\n    \"url\": \"https://github.com/shmck/coderoad-redux-js\"\n  },\n  \"license\": \"ISC\",\n  \"author\": \"Shawn McKay <shawn.j.mckay@gmail.com>\",\n  \"main\": \"index.js\",\n  \"repository\": \"https://github.com/shmck/coderoad-redux-js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"mocha-coderoad\": \"0.9.0\"\n  },\n    \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babelify\": \"^7.3.0\",\n    \"browser-sync\": \"^2.13.0\",\n    \"concurrently\": \"^2.2.0\",\n    \"npm-watch\": \"^0.1.5\",\n    \"coderoad-redux-js\": \"^0.1.0\"\n  },\n  \"watch\": {\n    \"reload\": {\n      \"patterns\": [\n        \"src\"\n      ],\n      \"extensions\": \"js,jsx,css,html,scss\",\n      \"ignore\": \"node_modules\",\n      \"quiet\": false\n    }\n  },\n  \"scripts\": {\n    \"browserify\": \"browserify src/index.js --extension=.jsx -o dist/bundle.js -t [ babelify --presets [ es2015 react ] ]\",\n    \"browsersync:reload\": \"browser-sync reload\",\n    \"browsersync:start\": \"browser-sync start --server --files 'index.html dist/bundle.js'\",\n    \"build\": \"npm run browserify\",\n    \"reload\": \"npm run browserify && npm run browsersync:reload\",\n    \"start\": \"concurrently --kill-others 'npm run build' 'npm run browsersync:start' 'npm run watch'\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"watch\": \"npm-watch\",\n    \"setup\": \"npm install && mkdir -p dist && npm i -g concurrently browser-sync && npm start\"\n  }\n}\n')"
          ]
        }
      ],
      "onPageComplete": "Continue to start working with Redux"
    },
    {
      "title": "The Store",
      "description": "The \"single source of truth\".\n\n```js\nconst store = createStore(reducer, initialState);\n```",
      "tasks": [
        {
          "description": "install Redux.",
          "hints": [
            "Run `npm install --save redux`."
          ],
          "actions": [
            "open('index.js')"
          ],
          "tests": [
            "02/01"
          ]
        },
        {
          "description": "import `createStore` from the redux module.",
          "hints": [
            "Add `import { createStore } from 'redux';`"
          ],
          "tests": [
            "02/02"
          ]
        },
        {
          "description": "create your first store and call it `store`. Use a simple \"reducer\" function for now, let's say `state => state`.",
          "hints": [
            "declare your store, `const store`",
            "call store with a simple reducer, `const store = createStore(state => state)`"
          ],
          "tests": [
            "02/03"
          ]
        },
        {
          "description": "log your store to the console and have a look.",
          "tests": [
            "02/04"
          ],
          "hints": [
            "console.log(store)"
          ]
        },
        {
          "description": "log `store.getState()` to the console",
          "tests": [
            "02/05"
          ],
          "hints": [
            "console.log(store.getState())"
          ]
        },
        {
          "description": "move the initial state to the top of the file, and pass it in as a second param your `createStore`",
          "tests": [
            "02/06"
          ],
          "hints": [
            "Move `initialState` above your `store`",
            "Pass in `initialState` as a second param to `createStore`"
          ],
          "actions": [
            "insert('const initialState = {\n  pokemon: [{\n    id: 1,\n    name: 'Luvdisc',\n    description: 'This heart-shaped POKéMON earned its name by swimming after loving couples it spotted in the ocean’s waves.',\n    votes: 3\n  }, {\n    id: 2,\n    name: 'Trubbish',\n    description: 'Wanting more garbage, they follow people who litter. They always belch poison gas.',\n    votes: 2\n  }, {\n    id: 3,\n    name: 'Stunfisk',\n    description: 'Its skin is very hard, so it is unhurt even if stepped on by sumo wrestlers. It smiles when transmitting electricity.',\n    votes: 0\n  }]\n };\n')"
          ]
        }
      ],
      "onPageComplete": "As you can see, the store is just an object with various methods like \"dispatch\" and \"getState\". Let's see what these methods do in the next step."
    },
    {
      "title": "Actions",
      "description": "Events that change the data.\n\n##### 1. Actions\n```js\nconst action = { type: 'ACTION_NAME' };\n```\n\n##### 2. Action Creators\n\n```js\nconst actionName = () => ({ type: 'ACTION_NAME' });\n```\n\n##### 3. Action Types\n\n```js\nconst ACTION_NAME = 'ACTION_NAME'\n```",
      "tasks": [
        {
          "description": "create an action called `voteUp`",
          "tests": [
            "03/01"
          ],
          "actions": [
            "open('index.js')"
          ]
        },
        {
          "description": "change `voteUp` into an action creator.",
          "tests": [
            "03/02"
          ]
        },
        {
          "description": "add a param of `id` to your action creator",
          "tests": [
            "03/03"
          ]
        },
        {
          "description": "create an action type for `voteUp`",
          "hints": [
            "const VOTE_UP = 'VOTE_UP"
          ],
          "tests": [
            "03/04"
          ]
        }
      ]
    },
    {
      "title": "Reducer",
      "description": "The data transformation\n\n```js\nconst reducer = (state) => {\n  console.log('state: ', state);\n  return state;\n};\n```",
      "tasks": [
        {
          "description": "Create a reducer and call it as the first param in your `createStore`",
          "tests": [
            "04/01"
          ],
          "actions": [
            "open('index.js')"
          ]
        }
      ]
    }
  ]
}