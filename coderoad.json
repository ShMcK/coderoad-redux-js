{
  "info": {
    "title": "CodeRoad Redux JS Tutorial",
    "description": "A [CodeRoad](https://coderoad.github.io) tutorial for learning Redux."
  },
  "pages": [
    {
      "title": "Project Setup",
      "description": "Getting a project setup is rarely easy. Luckily, we have a quick script that can do the work for us.\n\n---\n\nRunning `> npm run setup` will do the following:\n\n1. Install package dev dependencies\n2. Create an output directory called \"dist\"\n3. Install \"concurrently\" & \"browser-sync\" globally\n4. Run our app in the browser\n\nYou'll find this \"setup\" script located in your *package.json*.\n\n\n---\n\nWe'll be installing a lot of scripts from terminal. You may also want to consider installing the atom package [\"platformio-ide-terminal\"](https://github.com/platformio/platformio-atom-ide-terminal), which provides a terminal inside your editor.",
      "tasks": [
        {
          "description": "Open a terminal in this project directory and run `npm run setup`. Save to continue.",
          "tests": [
            "01/01"
          ],
          "hints": [
            "Open up Bash (terminal) in this project directory and run `npm run setup` to get setup",
            "If you're using Windows, you may want to use Git Bash",
            "If your setup fails, try running `sudo npm run setup`"
          ],
          "actions": [
            "open('package.json')",
            "set('{\n  \"name\": \"coderoad-redux-js-demo\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Coderoad tutorial for using redux with raw javascript\",\n  \"bugs\": {\n    \"url\": \"https://github.com/shmck/coderoad-redux-js\"\n  },\n  \"license\": \"ISC\",\n  \"author\": \"Shawn McKay <shawn.j.mckay@gmail.com>\",\n  \"main\": \"index.js\",\n  \"repository\": \"https://github.com/shmck/coderoad-redux-js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"mocha-coderoad\": \"0.9.3\"\n  },\n    \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babelify\": \"^7.3.0\",\n    \"browser-sync\": \"^2.13.0\",\n    \"concurrently\": \"^2.2.0\",\n    \"npm-watch\": \"^0.1.5\",\n    \"coderoad-redux-js\": \"^0.1.0\"\n  },\n  \"watch\": {\n    \"reload\": {\n      \"patterns\": [\n        \"src\"\n      ],\n      \"extensions\": \"js,jsx,css,html,scss\",\n      \"ignore\": \"node_modules\",\n      \"quiet\": false\n    }\n  },\n  \"scripts\": {\n    \"browserify\": \"browserify src/index.js --extension=.jsx -o dist/bundle.js -t [ babelify --presets [ es2015 react ] ]\",\n    \"browsersync:reload\": \"browser-sync reload\",\n    \"browsersync:start\": \"browser-sync start --server --files 'index.html dist/bundle.js'\",\n    \"build\": \"npm run browserify\",\n    \"reload\": \"npm run browserify && npm run browsersync:reload\",\n    \"start\": \"concurrently --kill-others 'npm run build' 'npm run browsersync:start' 'npm run watch'\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"watch\": \"npm-watch\",\n    \"setup\": \"npm i && mkdir -p dist && mkdir -p src && touch src/index.js && npm i -g concurrently browser-sync \"\n  }\n}\n')"
          ]
        },
        {
          "description": "Start the app by running `npm start`. Save to continue.",
          "tests": [
            "01/02"
          ],
          "actions": [
            "open('index.html')",
            "set('<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Worst Pokemon</title>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n    crossorigin=\"anonymous\"\n  />\n</head>\n<body>\n  <div id=\"app\">\n    <h1>Welcome!</h1>\n    <p>Check the console...</p>\n  </div>\n\n  <script src=\"dist/bundle.js\"></script>\n</body>\n</html>\n\n')"
          ]
        }
      ],
      "onPageComplete": "Continue to start working with Redux"
    },
    {
      "title": "The Store",
      "description": "The \"single source of truth\".\n\n```js\nconst store = createStore(reducer, initialState);\n```",
      "tasks": [
        {
          "description": "install Redux as a dependency.",
          "hints": [
            "Run `npm install --save redux`."
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "tests": [
            "02/01"
          ]
        },
        {
          "description": "import `createStore` from the redux module.",
          "hints": [
            "Add `import { createStore } from 'redux';`"
          ],
          "tests": [
            "02/02"
          ]
        },
        {
          "description": "create your first store and call it `store`. Use a simple \"reducer\" function for now, let's say `state => state`.",
          "hints": [
            "declare your store, `const store`",
            "call store with a simple reducer, `const store = createStore(state => state)`"
          ],
          "tests": [
            "02/03"
          ]
        },
        {
          "description": "log your `store` to the console and have a look.",
          "tests": [
            "02/04"
          ],
          "hints": [
            "console.log(store)"
          ]
        },
        {
          "description": "log `store.getState()` to the console",
          "tests": [
            "02/05"
          ],
          "hints": [
            "console.log(store.getState())"
          ]
        },
        {
          "description": "move the initial state to the top of the file, and pass it in as a second param your `createStore`",
          "tests": [
            "02/06"
          ],
          "hints": [
            "Move `initialState` above your `store`",
            "Pass in `initialState` as a second param to `createStore`"
          ],
          "actions": [
            "insert('const initialState = {\n  pokemon: [{\n    id: 1,\n    name: 'Luvdisc',\n    description: 'This heart-shaped POKéMON earned its name by swimming after loving couples it spotted in the ocean’s waves.',\n    votes: 3\n  }, {\n    id: 2,\n    name: 'Trubbish',\n    description: 'Wanting more garbage, they follow people who litter. They always belch poison gas.',\n    votes: 2\n  }, {\n    id: 3,\n    name: 'Stunfisk',\n    description: 'Its skin is very hard, so it is unhurt even if stepped on by sumo wrestlers. It smiles when transmitting electricity.',\n    votes: 0\n  }]\n };\n')"
          ]
        }
      ],
      "onPageComplete": "As you can see, the store is just an object with various methods like \"dispatch\" and \"getState\". Let's see what these methods do in the next step."
    },
    {
      "title": "Actions",
      "description": "Events that change the data.\n\n##### 1. Actions\n```js\nconst action = { type: 'ACTION_NAME' };\n```\n\n##### 2. Action Creators\n\n```js\nconst actionName = () => ({ type: 'ACTION_NAME' });\n```\n\n##### 3. Action Types\n\n```js\nconst ACTION_NAME = 'ACTION_NAME'\n```",
      "tasks": [
        {
          "description": "create an action called `voteUp` and a type of 'VOTE_UP'",
          "tests": [
            "03/01"
          ],
          "actions": [
            "open('src/index.js')"
          ]
        },
        {
          "description": "change `voteUp` into an action creator.",
          "tests": [
            "03/02"
          ],
          "hints": [
            "wrap your output object in round brackets",
            "Try this: `const voteUp = () => ({ type: \"VOTE_UP\" });`"
          ]
        },
        {
          "description": "add a param of `id` to your action creator, and a payload of \"id\"",
          "tests": [
            "03/03"
          ]
        },
        {
          "description": "create an action type for `voteUp`",
          "hints": [
            "const VOTE_UP = \"VOTE_UP\""
          ],
          "tests": [
            "03/04"
          ]
        },
        {
          "description": "Use the action type inside your `voteUp` action creator. Notice how your editor may autocomplete the action type.",
          "tests": [
            "03/05"
          ],
          "hints": [
            "change \"VOTE_UP\" to use the constant VOTE_UP",
            "Try this: `const voteUp = () => ({ type: VOTE_UP });`"
          ]
        }
      ],
      "onPageComplete": "Excellent! In the next unit we will look at how these actions can be used to transform data using a \"reducer\""
    },
    {
      "title": "Reducer",
      "description": "The data transformation\n\n```js\nconst reducer = (state) => {\n  console.log(state);\n  return state;\n};\n```",
      "tasks": [
        {
          "description": "Extract the `state => state` function called by `createStore`, and declare it with a variable called \"reducer\".",
          "tests": [
            "04/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "Try this: `const reducer = state => state;`",
            "Rename this: `const store = createStore(reducer, initialState)`"
          ]
        },
        {
          "description": "Log the state inside of your reducer. What does it look like?",
          "tests": [
            "04/02"
          ],
          "hints": [
            "Add a `console.log` statement inside of your reducer function",
            "Try this:```js\nconst reducer = (state) => {\n  console.log(state);\n  return state;\n};\n```"
          ]
        },
        {
          "description": "The reducer takes two params. The first is \"state\", call the second one \"action\"",
          "tests": [
            "04/03"
          ],
          "hints": [
            "Try this: `const reducer = (state, action) => ...`"
          ]
        },
        {
          "description": "Dispatch two voteUp actions through the reducer: `store.dispatch(voteUp(2))`. Change your log statement inside of your reducer to look like this: `console.log('state: ', state, 'action: ', action)`",
          "tests": [
            "04/04"
          ]
        },
        {
          "description": "Create a `switch` statement in your `reducer` and pass in `action.type`, the default return should return `state`",
          "tests": [
            "04/05"
          ],
          "hints": [
            "In your reducer, try this: `switch(action.type) {}`",
            "Your switch statement should have a `default: return state`"
          ]
        },
        {
          "description": "The `switch` statement should have a `default` case that returns the state",
          "tests": [
            "04/06"
          ]
        },
        {
          "description": "add a switch case for `VOTE_UP`. For now, just console.log the `id` of the action passed in and return the default state again. Tip: destructuring: `const { id } = action.payload;`",
          "tests": [
            "04/07"
          ],
          "hints": [
            "Try this: `case VOTE_UP: console.log(action.payload.id);`"
          ]
        }
      ],
      "onPageComplete": "There are a few \"gotchas\" that come up with reducers. Reducers must be \"pure\" functions, let's find out how to accomplish this in the next step"
    },
    {
      "title": "Pure Functions",
      "description": "Reducers must be pure functions\n\nState is \"read only\".\n\nNotes\n```js\nconst nextPokemon = state.pokemon.map(p => {\n    if (id === p.id) {\n      p.votes += 1;\n    }\n    return p;\n  });\n  return {\n   pokemon: nextPokemon\n };\n ```",
      "tasks": [
        {
          "description": "Time to make the VOTE_UP action change the state. Return a new list of Pokemon after incrementing \"votes\" of the pokemon with the matching \"id\"",
          "tests": [
            "05/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "If the pokemon.id matches the payload.id, increase the votes by one",
            "Don't forget to return the new state",
            "Try returning `return { pokemon };`"
          ]
        },
        {
          "description": "Let's make a test to see that we are truly returning a new state. Call `Object.freeze()` on your `initialState`. `freeze` makes an object immutable - meaning the object can not be changed. And yet your reducer should still work, since it returns a new state each call.",
          "tests": [
            "05/02"
          ],
          "hints": [
            "Try this: `const initialState = Object.freeze({ ... })`"
          ]
        },
        {
          "description": "What if we were dealing with multiple keys on the state. We'd have to ensure that our changes return a complete new state each time. Use `Object.assign`",
          "tests": [
            "05/03"
          ],
          "hints": [
            "Try this: `case VOTE_UP: const pokemon = state.pokemon.map(...)`",
            "return `Object.assign({}, state, { pokemon: nextPokemon });`"
          ]
        }
      ],
      "onPageComplete": "Now that you have an idea of how reducers work. Next we can look at how to create multiple, modular reducers."
    },
    {
      "title": "Combine Reducers",
      "description": "Create modular, composable reducers with `combineReducers`.\n\nExplanation here.",
      "tasks": [
        {
          "description": "create a new `const reducers` and set it equal to \"reducer\". Pass \"reducers\" into your store for now, instead of \"reducer\". If this seems convoluted it is because we're trying not to break the app.",
          "tests": [
            "06/01"
          ],
          "actions": [
            "open('src/index.js')"
          ],
          "hints": [
            "First, try this: `const reducers = reducer;`",
            "Second, try this: `const store = createStore(reducers, initialState);`"
          ]
        },
        {
          "description": "We're going to create more than one reducer. They can't all be called \"reducer\", so rename your original reducer \"pokemon\". Make sure to set `reducers` equal to the new name as well.",
          "tests": [
            "06/02"
          ],
          "hints": [
            "First, rename \"pokemon\" to \"reducer\"",
            "Like this: `const pokemon = (state, action) => {...}`",
            "Second, change your \"reducers\" to equal \"pokemon\"",
            "Like this: `const reducers = pokemon;`"
          ]
        },
        {
          "description": "When we use `combineReducers` we will be able to define the initial state inside of each reducer. To keep things working, we'll have to do this step by step. Copy the \"pokemon\" key from `initialState` and give it its own variable called \"defaultPokemon\". It should be an array with three pokemon.",
          "tests": [
            "06/03"
          ],
          "hints": [
            "Like this: `const defaultPokemon = [{ ... }, { ... }, { ... }]`"
          ]
        },
        {
          "description": "Set your pokemon reducer first param, state, to equal \"pokemon\", and give it a default value of `defaultPokemon` using ES6 default params.",
          "tests": [
            "06/04"
          ],
          "hints": [
            "Default params work like this: `fn(param1 = defaultParam, param2)`",
            "Like this: `const pokemon = (pokemon = defaultPokemon, action) => {`"
          ]
        },
        {
          "description": "Fix references to \"state\" inside your reducer to match the passed in value \"pokemon\"",
          "tests": [
            "06/05"
          ],
          "hints": [
            "Change three references to \"pokemon\" in your pokemon reducer",
            "First: 'const pokemon = (pokemon = defaultPokemon, action) => {`",
            "Second: `const nextPokemon = pokemon.map(...)`",
            "Third: `default: return pokemon;`"
          ]
        },
        {
          "description": "Our initial state is now handled by `defaultPokemon`. Set the initial state inside of your `createStore` to simply be an empty object (`{}`).",
          "tests": [
            "06/06"
          ],
          "hints": [
            "Try this: `const store = createStore(reducers, {});`"
          ]
        },
        {
          "description": "import `combineReducers` from redux",
          "tests": [
            "06/07"
          ],
          "hints": [
            "Try this: `import { combineReducers } from 'redux';`"
          ]
        },
        {
          "description": "`reducers` should now call `combineReducers` instead and call `pokemon`. `combineReducers` takes an object with keys of each reducer.",
          "tests": [
            "06/08"
          ],
          "hints": [
            "Try this: `const reducers = combineReducers({pokemon});`"
          ]
        }
      ],
      "onPageComplete": "The state remains the same, but now our reducers are much more modular. In the next step, we will separate our code into it's own file"
    },
    {
      "title": "File Structure",
      "description": "Refactor your project into different files.\n\nExplanation here",
      "tasks": [
        {
          "description": "create a folder in your base directory called \"pokemon\" and add a file inside called \"index.js\"",
          "tests": [
            "07/01"
          ],
          "hints": [
            "create a file in \"src/pokemon/index.js\""
          ]
        },
        {
          "description": "copy the `VOTE_UP` action type from \"index.js\" and put it in \"src/pokemon/index.js\". Keep the original version for now, so our app won't break yet.",
          "tests": [
            "07/02"
          ],
          "hints": [
            "\"src/pokemon/index.js\" should have `const VOTE_UP = 'VOTE_UP';`"
          ]
        },
        {
          "description": "also copy the `voteUp` action creator from \"src/index.js\" and put it in \"src/pokemon/index.js\". Export it as a [\"named\" export](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/export).",
          "tests": [
            "07/03"
          ],
          "hints": [
            "move `voteUp` into \"src/pokemon/index.js\"",
            "\"src/pokemon/index.js\" should have `const voteUp = id => ({ type: VOTE_UP, payload: { id } });`",
            "make it a named export: `export const voteUp` = ..."
          ]
        },
        {
          "description": "import `voteUp` inside of \"src/index.js\". Also delete the unnecessary 'voteUp' in the same file from before.",
          "tests": [
            "07/04"
          ],
          "hints": [
            "Try this: `import { voteUp } from './pokemon';`"
          ]
        },
        {
          "description": "take the `defaultPokemon` from \"src/index.js\" and copy it into \"src/pokemon/index.js\"",
          "tests": [
            "07/05"
          ]
        },
        {
          "description": "take your `pokemon` reducer from \"src/index.js\" and put it in \"src/pokemon/index.js\". Export the reducer as a \"default\" export",
          "tests": [
            "07/06"
          ]
        },
        {
          "description": "in your \"src/index.js\" file, also import your pokemon reducer. This can be on the same line of code. Delete the unnecessary original \"pokemon\", \"defaultPokemon\" and \"VOTE_UP\" as well.",
          "tests": [
            "07/07"
          ],
          "hints": [
            "Try this: `import { default as pokemon, voteUp } from './pokemon';`"
          ]
        }
      ],
      "onPageComplete": "Page 7 complete..."
    },
    {
      "title": "Logger",
      "description": "The power of middleware with \"redux-logger\".\n\nExplanation here.",
      "tasks": [
        {
          "description": "import `applyMiddleware` in \"index.js\"",
          "tests": [
            "08/01"
          ],
          "actions": [
            "open('src/index.js')"
          ]
        },
        {
          "description": "set the second param in createStore to `applyMiddleware()`",
          "tests": [
            "08/02"
          ]
        },
        {
          "description": "install \"redux-logger\" using npm",
          "tests": [
            "08/03"
          ]
        },
        {
          "description": "create a \"logger\" as the result of `createLogger()`",
          "tests": [
            "08/04"
          ]
        },
        {
          "description": "pass \"logger\" into `applyMiddleware()`",
          "tests": [
            "08/05"
          ]
        }
      ],
      "onPageComplete": "Look in the console"
    },
    {
      "title": "Second Action",
      "description": "Creating a \"SORT_BY_POPULARITY\" action.\n\n```js\nfunction sortByVotes(a, b) {\n  switch(true) {\n   case a.votes < b.votes:\n    return 1;\n  case a.votes > b.votes:\n    return -1;\n  default:\n    return 0;\n  }\n }\n```\n\nSort pokemon by votes",
      "tasks": [
        {
          "description": "create an action type for 'SORT_BY_POPULARITY'",
          "tests": [
            "09/01"
          ],
          "actions": [
            "open('src/pokemon/index.js')"
          ]
        },
        {
          "description": "create an action creator called 'sortByPopularity'",
          "tests": [
            "09/02"
          ]
        },
        {
          "description": "dispatch a `sortByPopularity` action after the two voteUp dispatches",
          "tests": [
            "09/03"
          ]
        },
        {
          "description": "add a `SORT_BY_POPULARITY` case that returns `pokemon.sort();`",
          "tests": [
            "09/04"
          ]
        },
        {
          "description": "create a sortByVotes function and pass it into the pokemon.sort function",
          "tests": [
            "09/05"
          ]
        },
        {
          "description": "Make a `sortByKey` function, which is more reusable, by wrapping it in a function that takes a key",
          "tests": [
            "09/06"
          ]
        },
        {
          "description": "You've just created a **thunk** - a function that returns a function. Pass your function into the pokemon.sort() method and give it the key of 'votes'",
          "tests": [
            "09/07"
          ]
        }
      ],
      "onPageComplete": "In the next step, we'll look at using thunks to call async actions"
    },
    {
      "title": "Thunk",
      "description": "Using thunks for async actions.",
      "tasks": [
        {
          "description": "install \"redux-thunk\" as a dependency",
          "tests": [
            "10/01"
          ],
          "actions": [
            "open('src/index.js')"
          ]
        },
        {
          "description": "import thunk from \"redux-thunk\"",
          "tests": [
            "10/02"
          ]
        },
        {
          "description": "add thunk to applyMiddleware. The logger should always go last",
          "tests": [
            "10/03"
          ]
        },
        {
          "description": "change the voteUp action creator to return a thunk with the param of \"dispatch\"",
          "tests": [
            "10/04"
          ]
        },
        {
          "description": "voteUp should dispatch VOTE_UP",
          "tests": [
            "10/05"
          ]
        },
        {
          "description": "voteUp should dispatch sortByPopularity after each vote",
          "tests": [
            "10/06"
          ]
        }
      ],
      "onPageComplete": ""
    }
  ]
}